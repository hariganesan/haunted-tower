package {		import flash.display.MovieClip;	import flash.utils.Timer;	import flash.text.TextField;	import flash.events.*;		public final class Main extends MovieClip {				// user game state		private var gameState:int;		private var currentLevel:int = 3;		private var currentScore:int = 0;		private var currentHealth:int = 10;		//private var currentSpeed:int = 1;				// attackers and timer		private var timerDelay:int = 2000; // default delay (in ms)		private var attackerTimer:Timer;		private var attackerCount:int = 0;		private var attackersRemaining:int;				// defenders and projectiles		private var projectileCount:int = 0;				// on-screen static elements		private var horizon:LineBlack;		private var score:TextField;		private var health:TextField;		private var msgGameOver:TextField;				public function Main() {			// constructor code			Init();			gameState = GameState.ACTIVE;						trace("init'd main");		}				private function Init():void {			stage.frameRate = 30;						// create score			score = new TextField(); // TODO: format			score.text = 'Score: ' + currentScore;			score.x = stage.stageWidth * 0.01;			score.y = stage.stageHeight * 0.95;			addChild(score);						// create health			health = new TextField(); // TODO: format			health.text = currentHealth.toString();			health.x = stage.stageWidth * 0.9;			health.y = score.y;			addChild(health);						// create line for horizon			horizon = new LineBlack();			horizon.x = 0;			horizon.y = stage.stageHeight * 0.9;			addChild(horizon);						// begin first level			attackersRemaining = currentLevel * 10;			attackerTimer = new Timer(timerDelay, attackersRemaining);			attackerTimer.addEventListener(TimerEvent.TIMER, createAttacker);			attackerTimer.start();		}				private function focus(m:MouseEvent):void {			stage.focus = this;		}				private function createAttacker(t:TimerEvent):void {			var attacker:Attacker = 				new Attacker(this, attackerCount + 1, 3, 3, currentLevel);			attackerCount++;			attackersRemaining--; // is timer dynamic (does var change for timer?)		}				private function destroyAttacker(id:int):void {					}				public function addDamage(strength:int):void {			currentHealth -= strength;						if (currentHealth <= 0) {				currentHealth = 0;				health.text = currentHealth.toString();				endGame();			}						health.text = currentHealth.toString();		}				public function endGame():void {			attackerTimer.stop();						gameState = GameState.INACTIVE;			msgGameOver = new TextField();			msgGameOver.text = "Game Over";			msgGameOver.x = stage.stageWidth * 0.45;			msgGameOver.y = stage.stageHeight/2;			addChild(msgGameOver);		}				// accessor functions				public function getHorizon():LineBlack {			return horizon;		}				public function getGameState():int {			return gameState;		}				public function getProjectile(index:int):Projectile {			// placeholder fn			return new Projectile(this, 1, 1, Math.random() * stage.stageWidth, Math.random() * stage.stageHeight);		}				public function getProjectileCount():int {			return projectileCount;		}				public function addProjectile(proj:Projectile):int {			// add projectile to vector			projectileCount++;						// return next available id			return 0;		}				public function removeProjectile(proj:Projectile):void {			projectileCount--;						// add to next available id list		}	}	}